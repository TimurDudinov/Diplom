library(Matrix)
library(installr)
library(matlab)
library(MASS)
library(igraph)#for working with graph
library(ggplot2)#for plotting graph
library(TAM)#for tam.mml,tam.jml
library(SimDesign)#for calculate bias
N<-
  OutOfDegree<-
  AmountEnds<-sample(1:(N/2),1)
Vertices<-c(1:N)
NumberEnds<-Vertices[-(1:(N-AmountEnds))]
#Ends<-Vertices[-(1:(N-AmountEnds))]
#NumberEnds<-c(sample(2:N,AmountEnds))
#NumberEnds<-NumberEnds[order(NumberEnds)]#упорядочили по возрастанию

DelZeroColumn<-function(A){
  B<-A
  k <- 0
  for (i in 1:length(A[1,])){
    if (sum(A[, i] == 0) == length(A[,1])) {
      B <- B[,-i + k]
      k <- k + 1
    }
  }
  A<-B
  rm(B)
  rm(k)
  return(A)
}

GenIncidenMatrix <- function(N, OutOfDegree) { 
  M <- N * OutOfDegree
  
  A <- matrix(0, nrow = N, ncol = M)
  
  edgesIndex <- 1
  for (i in 1:(N-AmountEnds))
  {
    
    A[i,edgesIndex]<-1
    A[i+1,edgesIndex]<- -1
    edgesIndex<- edgesIndex+1
    
  }
  targets <- c(1:N)
  for (i in 1:(N-AmountEnds))
  { targets<-targets[-1]
  for (j in 1:(OutOfDegree-1))
  {
    if(is.empty(targets)!=T)
    {
      A[i,edgesIndex]<-1
      target<-targets[sample(1:length(targets),1)]
      A[target,edgesIndex]<- -1
      edgesIndex<- edgesIndex+1
    }
  }
  }
  #delete zero columns
  A<-DelZeroColumn(A)
  return(A)
}
#матрица пользователей

IncidMatr<-GenIncidenMatrix(N,OutOfDegree)

NumberPeople<-1000
NameRows<-function(NumberPeople) #
{
  np<-c(1:NumberPeople)
  persons<-paste0("person",np)
  return(persons)
}


  A<-matrix(0,nrow = N,ncol = OutOfDegree)
  for(i in 1:N)
  {
    a<-c(rlnorm(OutOfDegree))
    A[i,]<-a
  }
  B<-matrix(0,nrow = N,ncol = OutOfDegree)
  for (i in 1:N)
  {
    b<-c(rnorm(OutOfDegree))
    B[i,]<-b
  }
 
t<-c(rnorm(NumberPeople))
GenProb<-function(A,B,teta)
{
Z<-matrix(0,ncol=OutOfDegree,nrow=(N-AmountEnds))
for (i in 1:(N-AmountEnds))
{ j<-1
while (j!=OutOfDegree+1)
{
  Z[i,j]<-A[i,j]*teta+B[i,j]
  j<-j+1
}
}
P<-matrix(0,ncol=OutOfDegree,nrow=(N-AmountEnds))
for (i in 1:(N-AmountEnds))
{
  j<-1
  while(j!=OutOfDegree+1)
  {
    P[i,j]<-exp(Z[i,j])/sum(exp(Z[i,])) 
    j<-j+1
  }
}
return(P)
}

GenUserMatrix<-function(IncidMatr,NumberPeople)
{ 
  copy<-NumberEnds
  nr<-NameRows(NumberPeople)
  UserMatrix<-matrix(0,ncol = dim(IncidMatr)[2],nrow = NumberPeople,dimnames = list(nr,NULL))
  M<-dim(IncidMatr)[2]
  NumberEdge<-c()
  fire<-c()
  for (j in 1:M)
  {
    if (IncidMatr[1,j] == 1)
    { 
      fire[j]<-j #все ребра выходящие из первой вершины
    }
  }
  fire<-fire[!is.na(fire)]
  for (pr in 1:NumberPeople)
  {
    teta<-t[pr]
   P<-GenProb(A,B,teta)
    p<-P[1,]
    re<-sample(fire,1,prob = p)#чтобы мы всегда выходили из первой вершины
    UserMatrix[pr,re]<-1
    NumberEnds<-copy#так как будут удаляться терминальные вершины, то для каждого нового человека
    # вектор конечных вершин заново обновляется
    while (length(NumberEnds) == AmountEnds)
    { i<-1
    while(i !=N+1)
    {
      if (IncidMatr[i,re] == -1)
      {
        nv<-i
        j<-1
        while (j!=M+1)
        {
          
          if (IncidMatr[i,j] == 1)
          {
            NumberEdge[j]<-j# номера столбцов,где есть 1 в матрице инцидентности
            
          }
          j<-j+1
        }
        NumberEdge<-NumberEdge[!is.na(NumberEdge)]
        if (is.null(NumberEdge) != T)
        {
          p<-P[nv,]
          re<-sample(NumberEdge,1,prob = p)#следующее ребро
          UserMatrix[pr,re]<-1
        }else{#если NumberEdge нулевой,то мы находимя в термиенальной вершине
          NumberEnds<-NumberEnds[-(which(NumberEnds==i))]# удаляем ее из NumberEnds
        }
      }
      NumberEdge<-c()
      i<-i+1
    }
    }
  }
  return(UserMatrix)
}
UserMatrix<-GenUserMatrix(IncidMatr,NumberPeople)
#матрица ответов
InCategories<-function(Answers){
  M<-dim(IncidMatr)[2]
  Categories<-matrix(0,ncol=OutOfDegree,nrow=(N-AmountEnds))
  for (i in 1:(N-AmountEnds))
  { ne<-c()
  j<-1
  while (j!=M+1)
  {
    if (IncidMatr[i,j]==1)
    {
      ne[j]<-j
    }
    j<-j+1
  }
  ne<-ne[!is.na(ne)]
  Categories[i,]<-ne
  }
  for (per in 1:NumberPeople)
  {
    j<-1
    while(j!=(N-AmountEnds)+1)
    {
      for (k in 1:OutOfDegree)
      {
        if (Answers[per,j]%in%Categories[,k])
        {
          Answers[per,j]<-k-1
        }
      }
      j<-j+1
    }
  }
  return(Answers)
}

GenAnswerMatrix<-function(IncidMatr,UserMatrix){
  
  nr<-c()
  nc<-c()
  for(i in 1:NumberPeople)
  {
    nr[i]<-paste0("person",i)
  }
  for (i in 1:N)
  {
    nc[i]<-paste0("Item",i)
  }
  Answers<-matrix(NA,nrow=NumberPeople,ncol=N,dimnames = list(nr,nc))
  ne<-c()
  nv<-c()
  for (per in 1:NumberPeople)
  {
    for (j in 1:dim(IncidMatr)[2])
    {
      if (UserMatrix[per,j] == 1)
      {
        ne[j]<-j
        for (i in 1:N)
        {
          if (IncidMatr[i,j] == 1)
          {
            nv[i]<-i
            Answers[per,i]<-j
          }
        }
      }
    }
  }
  Answers<-InCategories(Answers)
  Answers<-Answers[,-NumberEnds]# удаляются нулевые столбцы
  Answers<-as.data.frame(Answers)
  return(Answers)
}
#оценки
# 2PL.  MML
#оценка,смещение
NumberPeople<-1000
t<-c(rnorm(NumberPeople))
N<-10
OutOfDegree<-4
k<-100
ET<-matrix(0,nrow=k,ncol = NumberPeople)
ETSE<-matrix(0,nrow = k,ncol=NumberPeople)
for (i in 1:k)
{
  AmountEnds<-sample(1:(N/2),1)
  Vertices<-c(1:N)
  NumberEnds<-Vertices[-(1:(N-AmountEnds))]
  IncidMatr<-GenIncidenMatrix(N,OutOfDegree)
  A<-matrix(0,nrow = N,ncol = OutOfDegree)
  for(l in 1:N)
  {
    a<-c(rlnorm(OutOfDegree))
    A[l,]<-a
  }
  B<-matrix(0,nrow = N,ncol = OutOfDegree)
  for (l in 1:N)
  {
    b<-c(rnorm(OutOfDegree))
    B[l,]<-b
  }
  UserMatrix<-GenUserMatrix(IncidMatr,NumberPeople)
  Answers<-GenAnswerMatrix(IncidMatr,UserMatrix)
  j<-1
  while (j!=dim(Answers)[2] +1)
  { gh<-all(Answers[,j]<1)
  if(is.na(gh)|gh)
  { print(j)
    print("Error!")
    IncidMatr<-GenIncidenMatrix(N,OutOfDegree)
    UserMatrix<-GenUserMatrix(IncidMatr,NumberPeople)
    Answers<-GenAnswerMatrix(IncidMatr,UserMatrix)
    j<-1
  }else{j<-j+1}
  }
  fit<-tam.mml.2pl(resp=Answers,irtmodel = "2PL")
  estimated_theta <- IRT.factor.scores(fit)[, 1]
  ET[i,]<-estimated_theta
  estimated_theta_se <- IRT.factor.scores(fit)[, 2]
  ETSE[i,]<-estimated_theta_se
}
#AverageTeta
AverageTeta<-colSums(ET)/k
#EmpiricalSE
ESE<-matrix(0,nrow = k,ncol=NumberPeople)
for (i in 1:k)
{
  ESE[i,]<-(ET[i,]-AverageTeta)^2
}
ESE<-sqrt(colSums(ESE)/k)
#Standarized bias
Sbias<-bias(t,AverageTeta,type = "standardized")
Sbias<-abs(Sbias)
#relative bias
bias(t,AverageTeta,abs = T,type = "relative")
#parameter bias
bias(t,AverageTeta)
#MSE
MSE<-var(AverageTeta)+Sbias^2
#RMSE
rmse<-sqrt(MSE)






